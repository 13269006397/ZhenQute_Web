"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createVoiceSearchHelper;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var STATUS_INITIAL = 'initial';
var STATUS_ASKING_PERMISSION = 'askingPermission';
var STATUS_WAITING = 'waiting';
var STATUS_RECOGNIZING = 'recognizing';
var STATUS_FINISHED = 'finished';
var STATUS_ERROR = 'error';

function createVoiceSearchHelper(_ref) {
  var searchAsYouSpeak = _ref.searchAsYouSpeak,
      onQueryChange = _ref.onQueryChange,
      onStateChange = _ref.onStateChange;
  var SpeechRecognitionAPI = window.webkitSpeechRecognition || window.SpeechRecognition;

  var getDefaultState = function getDefaultState(status) {
    return {
      status: status,
      transcript: '',
      isSpeechFinal: false,
      errorCode: undefined
    };
  };

  var state = getDefaultState(STATUS_INITIAL);
  var recognition;

  var isBrowserSupported = function isBrowserSupported() {
    return Boolean(SpeechRecognitionAPI);
  };

  var isListening = function isListening() {
    return state.status === STATUS_ASKING_PERMISSION || state.status === STATUS_WAITING || state.status === STATUS_RECOGNIZING;
  };

  var setState = function setState() {
    var newState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    state = _objectSpread({}, state, newState);
    onStateChange();
  };

  var getState = function getState() {
    return state;
  };

  var resetState = function resetState() {
    var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : STATUS_INITIAL;
    setState(getDefaultState(status));
  };

  var onStart = function onStart() {
    setState({
      status: STATUS_WAITING
    });
  };

  var onError = function onError(event) {
    setState({
      status: STATUS_ERROR,
      errorCode: event.error
    });
  };

  var onResult = function onResult(event) {
    setState({
      status: STATUS_RECOGNIZING,
      transcript: event.results[0] && event.results[0][0] && event.results[0][0].transcript || '',
      isSpeechFinal: event.results[0] && event.results[0].isFinal
    });

    if (searchAsYouSpeak && state.transcript) {
      onQueryChange(state.transcript);
    }
  };

  var onEnd = function onEnd() {
    if (!state.errorCode && state.transcript && !searchAsYouSpeak) {
      onQueryChange(state.transcript);
    }

    if (state.status !== STATUS_ERROR) {
      setState({
        status: STATUS_FINISHED
      });
    }
  };

  var stop = function stop() {
    if (recognition) {
      recognition.stop();
      recognition = undefined;
    }

    resetState();
  };

  var start = function start() {
    recognition = new SpeechRecognitionAPI();

    if (!recognition) {
      return;
    }

    resetState(STATUS_ASKING_PERMISSION);
    recognition.interimResults = true;
    recognition.addEventListener('start', onStart);
    recognition.addEventListener('error', onError);
    recognition.addEventListener('result', onResult);
    recognition.addEventListener('end', onEnd);
    recognition.start();
  };

  var dispose = function dispose() {
    if (!recognition) {
      return;
    }

    recognition.stop();
    recognition.removeEventListener('start', onStart);
    recognition.removeEventListener('error', onError);
    recognition.removeEventListener('result', onResult);
    recognition.removeEventListener('end', onEnd);
    recognition = undefined;
  };

  var toggleListening = function toggleListening() {
    if (!isBrowserSupported()) {
      return;
    }

    if (isListening()) {
      stop();
    } else {
      start();
    }
  };

  return {
    getState: getState,
    isBrowserSupported: isBrowserSupported,
    isListening: isListening,
    toggleListening: toggleListening,
    dispose: dispose
  };
}