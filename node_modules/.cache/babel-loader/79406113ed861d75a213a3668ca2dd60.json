{"remainingRequest":"E:\\Vuesax\\VueJs版本\\vuesax-admin-v3.2\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!E:\\Vuesax\\VueJs版本\\vuesax-admin-v3.2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Vuesax\\VueJs版本\\vuesax-admin-v3.2\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Vuesax\\VueJs版本\\vuesax-admin-v3.2\\src\\views\\apps\\chat\\Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Vuesax\\VueJs版本\\vuesax-admin-v3.2\\src\\views\\apps\\chat\\Chat.vue","mtime":1627437567750},{"path":"E:\\Vuesax\\VueJs版本\\vuesax-admin-v3.2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625188725761},{"path":"E:\\Vuesax\\VueJs版本\\vuesax-admin-v3.2\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1625188715248},{"path":"E:\\Vuesax\\VueJs版本\\vuesax-admin-v3.2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625188725761},{"path":"E:\\Vuesax\\VueJs版本\\vuesax-admin-v3.2\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1625188673042}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar';\nimport contacts from './contacts';\nimport ChatContact from \"./ChatContact.vue\";\nimport UserProfile from \"./UserProfile.vue\";\nimport ChatNavbar from './ChatNavbar.vue';\nimport ChatLog from './ChatLog.vue';\nimport { findContactsList } from '../../acl/api';\nexport default {\n  name: 'vx-sidebar',\n  data: function data() {\n    return {\n      loginInfo: {\n        id: '',\n        email: '',\n        password: '',\n        avatar: ''\n      },\n      active: true,\n      isHidden: false,\n      contacts: contacts,\n      searchContact: \"\",\n      activeProfileSidebar: false,\n      activeChatUser: null,\n      userProfileId: -1,\n      typedMessage: \"\",\n      isChatPinned: false,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.70\n      },\n      clickNotClose: true,\n      isChatSidebarActive: true,\n      windowWidth: window.innerWidth\n    };\n  },\n  computed: {\n    chatLastMessaged: function chatLastMessaged() {\n      var _this = this;\n\n      return function (userId) {\n        return _this.$store.getters['chat/chatLastMessaged'](userId);\n      };\n    },\n    chatUnseenMessages: function chatUnseenMessages() {\n      var _this2 = this;\n\n      return function (userId) {\n        var unseenMsg = _this2.$store.getters['chat/chatUnseenMessages'](userId);\n\n        if (unseenMsg) return unseenMsg;\n      };\n    },\n    sorted: function sorted() {\n      var _this3 = this;\n\n      return this.chats.slice().sort(function (x, y) {\n        var xId = x.id;\n        var yId = y.id;\n\n        var chatDataX = _this3.$store.getters['chat/chatDataOfUser'](xId);\n\n        var chatDataY = _this3.$store.getters['chat/chatDataOfUser'](yId);\n\n        return chatDataY.isPinned - chatDataX.isPinned;\n      });\n    },\n    activeUserId: function activeUserId() {\n      return this.$store.state.AppActiveUser.id;\n    },\n    activeUserImg: function activeUserImg() {\n      return this.$store.state.AppActiveUser.img;\n    },\n    activeUserStatus: function activeUserStatus() {\n      return this.$store.state.AppActiveUser.status;\n    },\n    getStatusColor: function getStatusColor() {\n      var _this4 = this;\n\n      return function (isActiveUser) {\n        var userStatus = _this4.getUserStatus(isActiveUser);\n\n        if (userStatus == \"online\") {\n          return \"success\";\n        } else if (userStatus == \"do not disturb\") {\n          return \"danger\";\n        } else if (userStatus == \"away\") {\n          return \"warning\";\n        } else {\n          return \"grey\";\n        }\n      };\n    },\n    chats: function chats() {\n      return this.$store.getters['chat/chats'];\n    },\n    // 获得联系人列表\n    chatContacts: function chatContacts() {\n      return this.contacts;\n    },\n    searchQuery: {\n      get: function get() {\n        return this.$store.state.chat.chatSearchQuery;\n      },\n      set: function set(val) {\n        this.$store.dispatch('chat/setChatSearchQuery', val);\n      }\n    },\n    isActiveChatUser: function isActiveChatUser() {\n      var _this5 = this;\n\n      return function (userId) {\n        return userId == _this5.activeChatUser;\n      };\n    }\n  },\n  mounted: function mounted() {\n    this.getValue();\n    this.getContactList();\n  },\n  methods: {\n    getContactList: function getContactList() {\n      var _this6 = this;\n\n      findContactsList(this.loginInfo).then(function (data) {\n        _this6.contacts = data;\n        console.log(data);\n      });\n    },\n    getValue: function getValue() {\n      this.loginInfo.avatar = localStorage.getItem('avatar');\n    },\n    getUserStatus: function getUserStatus(isActiveUser) {\n      return isActiveUser ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status;\n    },\n    closeProfileSidebar: function closeProfileSidebar(value) {\n      this.activeProfileSidebar = value;\n    },\n    updateUserProfileId: function updateUserProfileId(userId) {\n      this.userProfileId = userId;\n      this.activeProfileSidebar = !this.activeProfileSidebar;\n    },\n    updateActiveChatUser: function updateActiveChatUser(contactId) {\n      this.activeChatUser = contactId;\n\n      if (this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)) {\n        this.$store.dispatch('chat/markSeenAllMessages', contactId);\n      }\n\n      var chatData = this.$store.getters['chat/chatDataOfUser'](this.activeChatUser);\n      if (chatData) this.isChatPinned = chatData.isPinned;else this.isChatPinned = false;\n      this.toggleChatSidebar();\n      this.typedMessage = '';\n    },\n    showProfileSidebar: function showProfileSidebar(userId) {\n      this.userProfileId = userId;\n      this.activeProfileSidebar = !this.activeProfileSidebar;\n    },\n    sendMsg: function sendMsg() {\n      if (!this.typedMessage) return;\n      var payload = {\n        isPinned: this.isChatPinned,\n        'msg': {\n          'textContent': this.typedMessage,\n          'time': String(new Date()),\n          'isSent': true,\n          'isSeen': false\n        },\n        'id': this.activeChatUser\n      };\n      this.$store.dispatch('chat/sendChatMessage', payload);\n      this.typedMessage = '';\n      this.$refs.chatLogPS.$el.scrollTop = this.$refs.chatLog.scrollHeight;\n    },\n    toggleIsChatPinned: function toggleIsChatPinned(value) {\n      this.isChatPinned = value;\n    },\n    handleWindowResize: function handleWindowResize(event) {\n      this.windowWidth = event.currentTarget.innerWidth;\n      this.setSidebarWidth();\n    },\n    setSidebarWidth: function setSidebarWidth() {\n      if (this.windowWidth < 1200) {\n        this.isChatSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isChatSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleChatSidebar: function toggleChatSidebar() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!value && this.clickNotClose) return;\n      this.isChatSidebarActive = value;\n    }\n  },\n  components: {\n    VuePerfectScrollbar: VuePerfectScrollbar,\n    ChatContact: ChatContact,\n    UserProfile: UserProfile,\n    ChatNavbar: ChatNavbar,\n    ChatLog: ChatLog\n  },\n  created: function created() {\n    var _this7 = this;\n\n    this.$nextTick(function () {\n      window.addEventListener('resize', _this7.handleWindowResize);\n    });\n    this.setSidebarWidth();\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('resize', this.handleWindowResize);\n  }\n};",{"version":3,"sources":["Chat.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- =========================================================================================\n    File Name: Chat.vue\n    Description: Chat Application - Stay connected\n========================================================================================== -->\n\n\n<template>\n    <div id=\"chat-app\" class=\"border border-solid d-theme-border-grey-light rounded relative overflow-hidden\">\n        <vs-sidebar class=\"items-no-padding\" parent=\"#chat-app\" :click-not-close=\"clickNotClose\" :hidden-background=\"clickNotClose\" v-model=\"isChatSidebarActive\" id=\"chat-list-sidebar\">\n\n            <!-- 点击头像后 个人简介 -->\n            <!-- USER PROFILE SIDEBAR -->\n            <user-profile :active=\"activeProfileSidebar\" :userId=\"userProfileId\" class=\"user-profile-container\" @closeProfileSidebar=\"closeProfileSidebar\"></user-profile>\n\n            <!-- 头像区 搜索区 -->\n            <div class=\"chat__profile-search flex p-4\">\n                <div class=\"relative inline-flex\">\n                    <vs-avatar class=\"m-0 border-2 border-solid border-white\" :src=loginInfo.avatar size=\"40px\" @click=\"showProfileSidebar(activeUserId)\" />\n                    <div class=\"h-3 w-3 border-white border border-solid rounded-full absolute right-0 bottom-0\" :class=\"'bg-' + getStatusColor(true)\"></div>\n                </div>\n                <vs-input icon=\"icon-search\" icon-pack=\"feather\" class=\"w-full mx-5 input-rounded-full no-icon-border\" placeholder=\"输入联系人\" v-model=\"searchQuery\"/>\n            </div>\n\n            <vs-divider class=\"d-theme-border-grey-light m-0\" />\n            <VuePerfectScrollbar class=\"chat-scroll-area pt-4\" :settings=\"settings\">\n\n                <!-- 当前聊天区 -->\n                <!-- ACTIVE CHATS LIST -->\n                <div class=\"chat__chats-list mb-8\">\n                    <h3 class=\"text-primary mb-5 px-4\">聊天</h3>\n                    <ul class=\"chat__active-chats bordered-items\">\n                        <li class=\"cursor-pointer\" v-for=\"(contact, index) in sorted\" :key=\"index\" @click=\"updateActiveChatUser(contact.id)\">\n                                                                            <!--最后消息时间                                  未读消息计数-->\n                            <chat-contact :contact=\"contact\" :lastMessaged=\"chatLastMessaged(contact.id).time\" :unseenMsg=\"chatUnseenMessages(contact.id)\" :isActiveChatUser=\"isActiveChatUser(contact.id)\"></chat-contact>\n                        </li>\n                    </ul>\n                </div>\n\n                <!-- 联系人区 -->\n                <!-- CONTACTS LIST -->\n                <div class=\"chat__contacts\">\n                    <h3 class=\"text-primary mb-5 px-4\">联系人</h3>\n                    <ul class=\"chat__contacts bordered-items\">\n                        <li class=\"cursor-pointer\" v-for=\"contact in chatContacts\" :key=\"contact.id\" @click=\"updateActiveChatUser(contact.id)\">\n                            <chat-contact :contact=\"contact\"></chat-contact>\n                        </li>\n                    </ul>\n                </div>\n            </VuePerfectScrollbar>\n        </vs-sidebar>\n\n        <!-- 聊天区 -->\n        <div class=\"chat__bg app-fixed-height chat-content-area border border-solid d-theme-border-grey-light border-t-0 border-r-0 border-b-0\" :class=\"{'sidebar-spacer--wide': clickNotClose, 'flex items-center justify-center': activeChatUser === null}\">\n            <template v-if=\"activeChatUser\">\n                <div class=\"chat__navbar\">\n                    <chat-navbar :isSidebarCollapsed=\"!clickNotClose\" :user-id=\"activeChatUser\" :isPinnedProp=\"isChatPinned\" @openContactsSidebar=\"toggleChatSidebar(true)\" @showProfileSidebar=\"updateUserProfileId\" @toggleIsChatPinned=\"toggleIsChatPinned\"></chat-navbar>\n                </div>\n                <VuePerfectScrollbar class=\"chat-content-scroll-area border border-solid d-theme-border-grey-light\" :settings=\"settings\" ref=\"chatLogPS\">\n                    <div class=\"chat__log\" ref=\"chatLog\">\n                        <chat-log :userId=\"activeChatUser\" v-if=\"activeChatUser\"></chat-log>\n                    </div>\n                </VuePerfectScrollbar>\n                <div class=\"chat__input flex p-4 bg-white\">\n                    <vs-input class=\"flex-1\" placeholder=\"输入消息..\" v-model=\"typedMessage\" @keyup.enter=\"sendMsg\" />\n                    <vs-button class=\"bg-primary-gradient ml-4\" type=\"filled\" @click=\"sendMsg\">发送</vs-button>\n                </div>\n            </template>\n            <template v-else>\n                <div class=\"flex flex-col items-center\">\n                    <feather-icon icon=\"MessageSquareIcon\" class=\"mb-4 bg-white p-8 shadow-md rounded-full\" svgClasses=\"w-16 h-16\"></feather-icon>\n                    <h4 class=\" py-2 px-4 bg-white shadow-md rounded-full cursor-pointer\" @click.stop=\"toggleChatSidebar(true)\">开始聊天</h4>\n                </div>\n            </template>\n        </div>\n    </div>\n</template>\n\n<script>\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\nimport contacts from './contacts'\nimport ChatContact from \"./ChatContact.vue\"\nimport UserProfile from \"./UserProfile.vue\"\nimport ChatNavbar from './ChatNavbar.vue'\nimport ChatLog from './ChatLog.vue'\nimport { findContactsList } from '../../acl/api'\n\nexport default{\n    name: 'vx-sidebar',\n    data() {\n        return {\n            loginInfo: {\n                id: '',\n                email: '',\n                password: '',\n                avatar: ''\n            },\n            active: true,\n            isHidden: false,\n            contacts: contacts,\n            searchContact: \"\",\n            activeProfileSidebar: false,\n            activeChatUser: null,\n            userProfileId: -1,\n            typedMessage: \"\",\n            isChatPinned: false,\n            settings: {\n                maxScrollbarLength: 60,\n                wheelSpeed: 0.70,\n            },\n            clickNotClose: true,\n            isChatSidebarActive: true,\n            windowWidth: window.innerWidth,\n        }\n    },\n    computed: {\n        chatLastMessaged() {\n            return (userId) => this.$store.getters['chat/chatLastMessaged'](userId);\n        },\n        chatUnseenMessages() {\n            return (userId) => {\n                const unseenMsg = this.$store.getters['chat/chatUnseenMessages'](userId);\n                if(unseenMsg) return unseenMsg\n            };\n        },\n        sorted() {\n            return this.chats.slice().sort((x,y) => {\n                const xId = x.id;\n                const yId = y.id;\n                const chatDataX = this.$store.getters['chat/chatDataOfUser'](xId);\n                const chatDataY = this.$store.getters['chat/chatDataOfUser'](yId);\n                return (chatDataY.isPinned - chatDataX.isPinned)\n            })\n        },\n        activeUserId() {\n            return this.$store.state.AppActiveUser.id;\n        },\n        activeUserImg() {\n            return this.$store.state.AppActiveUser.img;\n        },\n        activeUserStatus() {\n            return this.$store.state.AppActiveUser.status;\n        },\n        getStatusColor() {\n            return (isActiveUser) => {\n                const userStatus = this.getUserStatus(isActiveUser)\n\n                if(userStatus == \"online\"){\n                    return \"success\"\n                }else if(userStatus == \"do not disturb\"){\n                    return \"danger\"\n                }else if(userStatus == \"away\"){\n                    return \"warning\"\n                }else{\n                    return \"grey\"\n                }\n            }\n        },\n        chats() {\n            return this.$store.getters['chat/chats'];\n        },\n        // 获得联系人列表\n        chatContacts() {\n            return this.contacts;\n\n        },\n        searchQuery: {\n            get() {\n                return this.$store.state.chat.chatSearchQuery;\n            },\n            set(val) {\n                this.$store.dispatch('chat/setChatSearchQuery', val);\n            }\n        },\n        isActiveChatUser() {\n            return (userId) => userId == this.activeChatUser\n        }\n    },\n    mounted () {\n       this.getValue()\n       this.getContactList()\n    },\n    methods: {\n        getContactList(){\n            findContactsList(this.loginInfo).then(data => {\n                this.contacts = data\n                console.log(data)\n            })\n        },\n        getValue(){\n            this.loginInfo.avatar = localStorage.getItem('avatar');\n        },\n        getUserStatus(isActiveUser) {\n            return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status;\n        },\n        closeProfileSidebar(value) {\n            this.activeProfileSidebar = value\n        },\n        updateUserProfileId(userId) {\n            this.userProfileId = userId;\n            this.activeProfileSidebar = !this.activeProfileSidebar;\n        },\n        updateActiveChatUser(contactId) {\n            this.activeChatUser = contactId;\n            if(this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)) {\n                this.$store.dispatch('chat/markSeenAllMessages', contactId)\n            }\n            let chatData = this.$store.getters['chat/chatDataOfUser'](this.activeChatUser);\n            if(chatData) this.isChatPinned = chatData.isPinned;\n            else this.isChatPinned = false\n            this.toggleChatSidebar();\n            this.typedMessage = '';\n        },\n        showProfileSidebar(userId) {\n            this.userProfileId = userId;\n            this.activeProfileSidebar = !this.activeProfileSidebar;\n        },\n        sendMsg() {\n            if(!this.typedMessage) return\n            const payload = {\n                isPinned: this.isChatPinned,\n                'msg': {\n                    'textContent': this.typedMessage,\n                    'time': String(new Date()),\n                    'isSent': true,\n                    'isSeen': false,\n                },\n                'id': this.activeChatUser\n            }\n            this.$store.dispatch('chat/sendChatMessage', payload)\n            this.typedMessage = '';\n            this.$refs.chatLogPS.$el.scrollTop = this.$refs.chatLog.scrollHeight;\n        },\n        toggleIsChatPinned(value) {\n            this.isChatPinned = value;\n        },\n        handleWindowResize(event) {\n            this.windowWidth = event.currentTarget.innerWidth;\n            this.setSidebarWidth();\n        },\n        setSidebarWidth() {\n            if(this.windowWidth < 1200) {\n                this.isChatSidebarActive = this.clickNotClose = false;\n            }else {\n                this.isChatSidebarActive = this.clickNotClose = true;\n            }\n        },\n        toggleChatSidebar(value = false) {\n            if(!value && this.clickNotClose) return\n            this.isChatSidebarActive = value;\n        }\n    },\n    components: {\n        VuePerfectScrollbar,\n        ChatContact,\n        UserProfile,\n        ChatNavbar,\n        ChatLog,\n    },\n    created() {\n        this.$nextTick(() => {\n            window.addEventListener('resize', this.handleWindowResize);\n        })\n        this.setSidebarWidth();\n    },\n    beforeDestroy: function () {\n        window.removeEventListener('resize', this.handleWindowResize)\n    },\n}\n</script>\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuesax/apps/chat.scss\";\n</style>\n"],"sourceRoot":"src/views/apps/chat"}]}